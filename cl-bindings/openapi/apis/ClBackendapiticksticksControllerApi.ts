/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTick,
  TickWithRoute,
} from '../models/index';
import {
    CreateTickFromJSON,
    CreateTickToJSON,
    TickWithRouteFromJSON,
    TickWithRouteToJSON,
} from '../models/index';

export interface CreateTickRequest {
    createTick: CreateTick;
}

export interface SearchTicksRequest {
    seshId: string;
}

/**
 * ClBackendapiticksticksControllerApi - interface
 * 
 * @export
 * @interface ClBackendapiticksticksControllerApiInterface
 */
export interface ClBackendapiticksticksControllerApiInterface {
    /**
     * 
     * @param {CreateTick} createTick 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiticksticksControllerApiInterface
     */
    createTickRaw(requestParameters: CreateTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTick>>;

    /**
     */
    createTick(requestParameters: CreateTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTick>;

    /**
     * 
     * @param {string} seshId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiticksticksControllerApiInterface
     */
    searchTicksRaw(requestParameters: SearchTicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TickWithRoute>>>;

    /**
     */
    searchTicks(requestParameters: SearchTicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TickWithRoute>>;

}

/**
 * 
 */
export class ClBackendapiticksticksControllerApi extends runtime.BaseAPI implements ClBackendapiticksticksControllerApiInterface {

    /**
     */
    async createTickRaw(requestParameters: CreateTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTick>> {
        if (requestParameters['createTick'] == null) {
            throw new runtime.RequiredError(
                'createTick',
                'Required parameter "createTick" was null or undefined when calling createTick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTickToJSON(requestParameters['createTick']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTickFromJSON(jsonValue));
    }

    /**
     */
    async createTick(requestParameters: CreateTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTick> {
        const response = await this.createTickRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchTicksRaw(requestParameters: SearchTicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TickWithRoute>>> {
        if (requestParameters['seshId'] == null) {
            throw new runtime.RequiredError(
                'seshId',
                'Required parameter "seshId" was null or undefined when calling searchTicks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['seshId'] != null) {
            queryParameters['sesh_id'] = requestParameters['seshId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TickWithRouteFromJSON));
    }

    /**
     */
    async searchTicks(requestParameters: SearchTicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TickWithRoute>> {
        const response = await this.searchTicksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
