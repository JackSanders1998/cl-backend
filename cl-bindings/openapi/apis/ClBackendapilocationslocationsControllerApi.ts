/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLocation,
  Location,
  UpdateLocation,
} from '../models/index';
import {
    CreateLocationFromJSON,
    CreateLocationToJSON,
    LocationFromJSON,
    LocationToJSON,
    UpdateLocationFromJSON,
    UpdateLocationToJSON,
} from '../models/index';

export interface CreateLocationRequest {
    createLocation: CreateLocation;
}

export interface DeleteLocationByLocationIdRequest {
    locationId: string;
}

export interface GetLocationByLocationIdRequest {
    locationId: string;
}

export interface SearchLocationsRequest {
    name?: string | null;
}

export interface UpdateLocationByLocationIdRequest {
    locationId: string;
    updateLocation: UpdateLocation;
}

/**
 * ClBackendapilocationslocationsControllerApi - interface
 * 
 * @export
 * @interface ClBackendapilocationslocationsControllerApiInterface
 */
export interface ClBackendapilocationslocationsControllerApiInterface {
    /**
     * 
     * @param {CreateLocation} createLocation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapilocationslocationsControllerApiInterface
     */
    createLocationRaw(requestParameters: CreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     */
    createLocation(requestParameters: CreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * 
     * @param {string} locationId location id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapilocationslocationsControllerApiInterface
     */
    deleteLocationByLocationIdRaw(requestParameters: DeleteLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteLocationByLocationId(requestParameters: DeleteLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} locationId location id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapilocationslocationsControllerApiInterface
     */
    getLocationByLocationIdRaw(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     */
    getLocationByLocationId(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapilocationslocationsControllerApiInterface
     */
    searchLocationsRaw(requestParameters: SearchLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Location>>>;

    /**
     */
    searchLocations(requestParameters: SearchLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Location>>;

    /**
     * 
     * @param {string} locationId location id
     * @param {UpdateLocation} updateLocation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapilocationslocationsControllerApiInterface
     */
    updateLocationByLocationIdRaw(requestParameters: UpdateLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     */
    updateLocationByLocationId(requestParameters: UpdateLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

}

/**
 * 
 */
export class ClBackendapilocationslocationsControllerApi extends runtime.BaseAPI implements ClBackendapilocationslocationsControllerApiInterface {

    /**
     */
    async createLocationRaw(requestParameters: CreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters['createLocation'] == null) {
            throw new runtime.RequiredError(
                'createLocation',
                'Required parameter "createLocation" was null or undefined when calling createLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLocationToJSON(requestParameters['createLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     */
    async createLocation(requestParameters: CreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.createLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLocationByLocationIdRaw(requestParameters: DeleteLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling deleteLocationByLocationId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/{location_id}`.replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteLocationByLocationId(requestParameters: DeleteLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationByLocationIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getLocationByLocationIdRaw(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling getLocationByLocationId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/{location_id}`.replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     */
    async getLocationByLocationId(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getLocationByLocationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchLocationsRaw(requestParameters: SearchLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Location>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     */
    async searchLocations(requestParameters: SearchLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Location>> {
        const response = await this.searchLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLocationByLocationIdRaw(requestParameters: UpdateLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling updateLocationByLocationId().'
            );
        }

        if (requestParameters['updateLocation'] == null) {
            throw new runtime.RequiredError(
                'updateLocation',
                'Required parameter "updateLocation" was null or undefined when calling updateLocationByLocationId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/{location_id}`.replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLocationToJSON(requestParameters['updateLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     */
    async updateLocationByLocationId(requestParameters: UpdateLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.updateLocationByLocationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
