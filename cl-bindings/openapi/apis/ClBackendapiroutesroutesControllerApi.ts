/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoute,
  Route,
  RouteWithLocation,
} from '../models/index';
import {
    CreateRouteFromJSON,
    CreateRouteToJSON,
    RouteFromJSON,
    RouteToJSON,
    RouteWithLocationFromJSON,
    RouteWithLocationToJSON,
} from '../models/index';

export interface CreateRouteRequest {
    createRoute: CreateRoute;
}

export interface DeleteRouteRequest {
    routeId: string;
}

export interface GetRouteByRouteIdRequest {
    routeId: string;
}

/**
 * ClBackendapiroutesroutesControllerApi - interface
 * 
 * @export
 * @interface ClBackendapiroutesroutesControllerApiInterface
 */
export interface ClBackendapiroutesroutesControllerApiInterface {
    /**
     * 
     * @param {CreateRoute} createRoute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiroutesroutesControllerApiInterface
     */
    createRouteRaw(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Route>>;

    /**
     */
    createRoute(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Route>;

    /**
     * 
     * @param {string} routeId route id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiroutesroutesControllerApiInterface
     */
    deleteRouteRaw(requestParameters: DeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteRoute(requestParameters: DeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} routeId route id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiroutesroutesControllerApiInterface
     */
    getRouteByRouteIdRaw(requestParameters: GetRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteWithLocation>>;

    /**
     */
    getRouteByRouteId(requestParameters: GetRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteWithLocation>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClBackendapiroutesroutesControllerApiInterface
     */
    searchRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Route>>>;

    /**
     */
    searchRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Route>>;

}

/**
 * 
 */
export class ClBackendapiroutesroutesControllerApi extends runtime.BaseAPI implements ClBackendapiroutesroutesControllerApiInterface {

    /**
     */
    async createRouteRaw(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Route>> {
        if (requestParameters['createRoute'] == null) {
            throw new runtime.RequiredError(
                'createRoute',
                'Required parameter "createRoute" was null or undefined when calling createRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRouteToJSON(requestParameters['createRoute']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteFromJSON(jsonValue));
    }

    /**
     */
    async createRoute(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Route> {
        const response = await this.createRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRouteRaw(requestParameters: DeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling deleteRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/routes/{route_id}`.replace(`{${"route_id"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRoute(requestParameters: DeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRouteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getRouteByRouteIdRaw(requestParameters: GetRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteWithLocation>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getRouteByRouteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/routes/{route_id}`.replace(`{${"route_id"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteWithLocationFromJSON(jsonValue));
    }

    /**
     */
    async getRouteByRouteId(requestParameters: GetRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteWithLocation> {
        const response = await this.getRouteByRouteIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Route>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token_jwt", ["general"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RouteFromJSON));
    }

    /**
     */
    async searchRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Route>> {
        const response = await this.searchRoutesRaw(initOverrides);
        return await response.value();
    }

}
