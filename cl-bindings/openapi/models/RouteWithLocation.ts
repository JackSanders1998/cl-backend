/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Scale } from './Scale';
import {
    ScaleFromJSON,
    ScaleFromJSONTyped,
    ScaleToJSON,
} from './Scale';
import type { Discipline } from './Discipline';
import {
    DisciplineFromJSON,
    DisciplineFromJSONTyped,
    DisciplineToJSON,
} from './Discipline';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * 
 * @export
 * @interface RouteWithLocation
 */
export interface RouteWithLocation {
    /**
     * 
     * @type {string}
     * @memberof RouteWithLocation
     */
    author: string;
    /**
     * 
     * @type {Date}
     * @memberof RouteWithLocation
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof RouteWithLocation
     */
    description?: string | null;
    /**
     * 
     * @type {Array<Discipline>}
     * @memberof RouteWithLocation
     */
    disciplines: Array<Discipline>;
    /**
     * 
     * @type {string}
     * @memberof RouteWithLocation
     */
    grade: string;
    /**
     * 
     * @type {Location}
     * @memberof RouteWithLocation
     */
    location: Location;
    /**
     * 
     * @type {string}
     * @memberof RouteWithLocation
     */
    routeId: string;
    /**
     * 
     * @type {Scale}
     * @memberof RouteWithLocation
     */
    scale: Scale;
    /**
     * 
     * @type {Date}
     * @memberof RouteWithLocation
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the RouteWithLocation interface.
 */
export function instanceOfRouteWithLocation(value: object): value is RouteWithLocation {
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('disciplines' in value) || value['disciplines'] === undefined) return false;
    if (!('grade' in value) || value['grade'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('routeId' in value) || value['routeId'] === undefined) return false;
    if (!('scale' in value) || value['scale'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function RouteWithLocationFromJSON(json: any): RouteWithLocation {
    return RouteWithLocationFromJSONTyped(json, false);
}

export function RouteWithLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteWithLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'author': json['author'],
        'createdAt': (new Date(json['created_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'disciplines': ((json['disciplines'] as Array<any>).map(DisciplineFromJSON)),
        'grade': json['grade'],
        'location': LocationFromJSON(json['location']),
        'routeId': json['route_id'],
        'scale': ScaleFromJSON(json['scale']),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function RouteWithLocationToJSON(value?: RouteWithLocation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'author': value['author'],
        'created_at': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'disciplines': ((value['disciplines'] as Array<any>).map(DisciplineToJSON)),
        'grade': value['grade'],
        'location': LocationToJSON(value['location']),
        'route_id': value['routeId'],
        'scale': ScaleToJSON(value['scale']),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

