/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TickWithRoute } from './TickWithRoute';
import {
    TickWithRouteFromJSON,
    TickWithRouteFromJSONTyped,
    TickWithRouteToJSON,
} from './TickWithRoute';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * 
 * @export
 * @interface SeshWithLocationAndTicks
 */
export interface SeshWithLocationAndTicks {
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationAndTicks
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationAndTicks
     */
    end?: Date | null;
    /**
     * 
     * @type {Location}
     * @memberof SeshWithLocationAndTicks
     */
    location: Location;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationAndTicks
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationAndTicks
     */
    seshId: string;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationAndTicks
     */
    start: Date;
    /**
     * 
     * @type {Array<TickWithRoute>}
     * @memberof SeshWithLocationAndTicks
     */
    ticks: Array<TickWithRoute>;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationAndTicks
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationAndTicks
     */
    userId: string;
}

/**
 * Check if a given object implements the SeshWithLocationAndTicks interface.
 */
export function instanceOfSeshWithLocationAndTicks(value: object): value is SeshWithLocationAndTicks {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('seshId' in value) || value['seshId'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('ticks' in value) || value['ticks'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function SeshWithLocationAndTicksFromJSON(json: any): SeshWithLocationAndTicks {
    return SeshWithLocationAndTicksFromJSONTyped(json, false);
}

export function SeshWithLocationAndTicksFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeshWithLocationAndTicks {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
        'location': LocationFromJSON(json['location']),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'seshId': json['sesh_id'],
        'start': (new Date(json['start'])),
        'ticks': ((json['ticks'] as Array<any>).map(TickWithRouteFromJSON)),
        'updatedAt': (new Date(json['updated_at'])),
        'userId': json['user_id'],
    };
}

export function SeshWithLocationAndTicksToJSON(value?: SeshWithLocationAndTicks | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created_at': ((value['createdAt']).toISOString()),
        'end': value['end'] == null ? undefined : ((value['end'] as any).toISOString()),
        'location': LocationToJSON(value['location']),
        'notes': value['notes'],
        'sesh_id': value['seshId'],
        'start': ((value['start']).toISOString()),
        'ticks': ((value['ticks'] as Array<any>).map(TickWithRouteToJSON)),
        'updated_at': ((value['updatedAt']).toISOString()),
        'user_id': value['userId'],
    };
}

