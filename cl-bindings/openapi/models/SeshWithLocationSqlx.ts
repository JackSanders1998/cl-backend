/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
} from './Environment';

/**
 * 
 * @export
 * @interface SeshWithLocationSqlx
 */
export interface SeshWithLocationSqlx {
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    author: string;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    description?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    end?: Date | null;
    /**
     * 
     * @type {Environment}
     * @memberof SeshWithLocationSqlx
     */
    environment: Environment;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    locationCreatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    locationId: string;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    locationUpdatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    seshId: string;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof SeshWithLocationSqlx
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SeshWithLocationSqlx
     */
    userId: string;
}



/**
 * Check if a given object implements the SeshWithLocationSqlx interface.
 */
export function instanceOfSeshWithLocationSqlx(value: object): value is SeshWithLocationSqlx {
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('locationCreatedAt' in value) || value['locationCreatedAt'] === undefined) return false;
    if (!('locationId' in value) || value['locationId'] === undefined) return false;
    if (!('locationUpdatedAt' in value) || value['locationUpdatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('seshId' in value) || value['seshId'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function SeshWithLocationSqlxFromJSON(json: any): SeshWithLocationSqlx {
    return SeshWithLocationSqlxFromJSONTyped(json, false);
}

export function SeshWithLocationSqlxFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeshWithLocationSqlx {
    if (json == null) {
        return json;
    }
    return {
        
        'author': json['author'],
        'createdAt': (new Date(json['created_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
        'environment': EnvironmentFromJSON(json['environment']),
        'locationCreatedAt': (new Date(json['location_created_at'])),
        'locationId': json['location_id'],
        'locationUpdatedAt': (new Date(json['location_updated_at'])),
        'name': json['name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'seshId': json['sesh_id'],
        'start': (new Date(json['start'])),
        'updatedAt': (new Date(json['updated_at'])),
        'userId': json['user_id'],
    };
}

export function SeshWithLocationSqlxToJSON(value?: SeshWithLocationSqlx | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'author': value['author'],
        'created_at': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'end': value['end'] == null ? undefined : ((value['end'] as any).toISOString()),
        'environment': EnvironmentToJSON(value['environment']),
        'location_created_at': ((value['locationCreatedAt']).toISOString()),
        'location_id': value['locationId'],
        'location_updated_at': ((value['locationUpdatedAt']).toISOString()),
        'name': value['name'],
        'notes': value['notes'],
        'sesh_id': value['seshId'],
        'start': ((value['start']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'user_id': value['userId'],
    };
}

