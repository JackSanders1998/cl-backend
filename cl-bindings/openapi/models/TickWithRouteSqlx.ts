/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attempt } from './Attempt';
import {
    AttemptFromJSON,
    AttemptFromJSONTyped,
    AttemptToJSON,
} from './Attempt';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
} from './Environment';
import type { Scale } from './Scale';
import {
    ScaleFromJSON,
    ScaleFromJSONTyped,
    ScaleToJSON,
} from './Scale';
import type { Discipline } from './Discipline';
import {
    DisciplineFromJSON,
    DisciplineFromJSONTyped,
    DisciplineToJSON,
} from './Discipline';

/**
 * 
 * @export
 * @interface TickWithRouteSqlx
 */
export interface TickWithRouteSqlx {
    /**
     * 
     * @type {Attempt}
     * @memberof TickWithRouteSqlx
     */
    attempt: Attempt;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    author: string;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    description?: string | null;
    /**
     * 
     * @type {Discipline}
     * @memberof TickWithRouteSqlx
     */
    discipline: Discipline;
    /**
     * 
     * @type {Array<Discipline>}
     * @memberof TickWithRouteSqlx
     */
    disciplines: Array<Discipline>;
    /**
     * 
     * @type {Environment}
     * @memberof TickWithRouteSqlx
     */
    environment: Environment;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    grade: string;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    lapGroup?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    locationAuthor: string;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    locationCreatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    locationDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    locationId: string;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    locationUpdatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    notes?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    routeCreatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    routeId: string;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    routeUpdatedAt: Date;
    /**
     * 
     * @type {Scale}
     * @memberof TickWithRouteSqlx
     */
    scale: Scale;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    seshId: string;
    /**
     * 
     * @type {string}
     * @memberof TickWithRouteSqlx
     */
    tickId: string;
    /**
     * 
     * @type {Date}
     * @memberof TickWithRouteSqlx
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the TickWithRouteSqlx interface.
 */
export function instanceOfTickWithRouteSqlx(value: object): value is TickWithRouteSqlx {
    if (!('attempt' in value) || value['attempt'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('discipline' in value) || value['discipline'] === undefined) return false;
    if (!('disciplines' in value) || value['disciplines'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('grade' in value) || value['grade'] === undefined) return false;
    if (!('locationAuthor' in value) || value['locationAuthor'] === undefined) return false;
    if (!('locationCreatedAt' in value) || value['locationCreatedAt'] === undefined) return false;
    if (!('locationId' in value) || value['locationId'] === undefined) return false;
    if (!('locationUpdatedAt' in value) || value['locationUpdatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('routeCreatedAt' in value) || value['routeCreatedAt'] === undefined) return false;
    if (!('routeId' in value) || value['routeId'] === undefined) return false;
    if (!('routeUpdatedAt' in value) || value['routeUpdatedAt'] === undefined) return false;
    if (!('scale' in value) || value['scale'] === undefined) return false;
    if (!('seshId' in value) || value['seshId'] === undefined) return false;
    if (!('tickId' in value) || value['tickId'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function TickWithRouteSqlxFromJSON(json: any): TickWithRouteSqlx {
    return TickWithRouteSqlxFromJSONTyped(json, false);
}

export function TickWithRouteSqlxFromJSONTyped(json: any, ignoreDiscriminator: boolean): TickWithRouteSqlx {
    if (json == null) {
        return json;
    }
    return {
        
        'attempt': AttemptFromJSON(json['attempt']),
        'author': json['author'],
        'createdAt': (new Date(json['created_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'discipline': DisciplineFromJSON(json['discipline']),
        'disciplines': ((json['disciplines'] as Array<any>).map(DisciplineFromJSON)),
        'environment': EnvironmentFromJSON(json['environment']),
        'grade': json['grade'],
        'lapGroup': json['lap_group'] == null ? undefined : json['lap_group'],
        'locationAuthor': json['location_author'],
        'locationCreatedAt': (new Date(json['location_created_at'])),
        'locationDescription': json['location_description'] == null ? undefined : json['location_description'],
        'locationId': json['location_id'],
        'locationUpdatedAt': (new Date(json['location_updated_at'])),
        'name': json['name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'routeCreatedAt': (new Date(json['route_created_at'])),
        'routeId': json['route_id'],
        'routeUpdatedAt': (new Date(json['route_updated_at'])),
        'scale': ScaleFromJSON(json['scale']),
        'seshId': json['sesh_id'],
        'tickId': json['tick_id'],
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function TickWithRouteSqlxToJSON(value?: TickWithRouteSqlx | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'attempt': AttemptToJSON(value['attempt']),
        'author': value['author'],
        'created_at': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'discipline': DisciplineToJSON(value['discipline']),
        'disciplines': ((value['disciplines'] as Array<any>).map(DisciplineToJSON)),
        'environment': EnvironmentToJSON(value['environment']),
        'grade': value['grade'],
        'lap_group': value['lapGroup'],
        'location_author': value['locationAuthor'],
        'location_created_at': ((value['locationCreatedAt']).toISOString()),
        'location_description': value['locationDescription'],
        'location_id': value['locationId'],
        'location_updated_at': ((value['locationUpdatedAt']).toISOString()),
        'name': value['name'],
        'notes': value['notes'],
        'route_created_at': ((value['routeCreatedAt']).toISOString()),
        'route_id': value['routeId'],
        'route_updated_at': ((value['routeUpdatedAt']).toISOString()),
        'scale': ScaleToJSON(value['scale']),
        'sesh_id': value['seshId'],
        'tick_id': value['tickId'],
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

