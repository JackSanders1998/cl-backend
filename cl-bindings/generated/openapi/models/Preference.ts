/* tslint:disable */
/* eslint-disable */
/**
 * cl-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Preference
 */
export interface Preference {
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    boulderScale: string;
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    colorScheme: string;
    /**
     * 
     * @type {Date}
     * @memberof Preference
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    preferenceId: string;
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    sportScale: string;
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    theme: string;
    /**
     * 
     * @type {Date}
     * @memberof Preference
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Preference
     */
    userId: string;
}

/**
 * Check if a given object implements the Preference interface.
 */
export function instanceOfPreference(value: object): value is Preference {
    if (!('boulderScale' in value) || value['boulderScale'] === undefined) return false;
    if (!('colorScheme' in value) || value['colorScheme'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('preferenceId' in value) || value['preferenceId'] === undefined) return false;
    if (!('sportScale' in value) || value['sportScale'] === undefined) return false;
    if (!('theme' in value) || value['theme'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function PreferenceFromJSON(json: any): Preference {
    return PreferenceFromJSONTyped(json, false);
}

export function PreferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Preference {
    if (json == null) {
        return json;
    }
    return {
        
        'boulderScale': json['boulder_scale'],
        'colorScheme': json['color_scheme'],
        'createdAt': (new Date(json['created_at'])),
        'preferenceId': json['preference_id'],
        'sportScale': json['sport_scale'],
        'theme': json['theme'],
        'updatedAt': (new Date(json['updated_at'])),
        'userId': json['user_id'],
    };
}

export function PreferenceToJSON(value?: Preference | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'boulder_scale': value['boulderScale'],
        'color_scheme': value['colorScheme'],
        'created_at': ((value['createdAt']).toISOString()),
        'preference_id': value['preferenceId'],
        'sport_scale': value['sportScale'],
        'theme': value['theme'],
        'updated_at': ((value['updatedAt']).toISOString()),
        'user_id': value['userId'],
    };
}

